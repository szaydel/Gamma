get-server-by-eir ()
###-------------------------------------------------------------------------###
#### Responsiveness of this function varies based on performance of NFS   #####
#### and factors such as number of systems in the suppplied query         #####
###-------------------------------------------------------------------------###
## Your milage may vary with regard to how quickly results are returned
## A lot depends on the responsiveness of NFS, and the shear number of files
## that are scanned for hcs.info bits, after the 'HOST_ARRAY' is assigned

{
local MYOS=$(uname)

## We need to make sure that we are running Linux and
## that bash is our current shell
## If OS is not linux, or you are not in bash, need to stop here
if [[ ! "${MYOS}" =~ "[Ll]inux" || -z "${BASH}" ]];
then
    printf "%s\n" "Either, you are not in BASH, or you are not using Linux. Exiting..."
    return 1
fi

local GREP_OPTIONS="-r -E --color=never"
local GREP_RANGE="--before-context=7 --after-context=7"
## local DEBUG="0"      ## Not used in this function
local DIV=$(printf "%80s\n"|tr ' ' - )
local THIS_HOST=$(hostname)
local EACH_HOST=""
local EIR_NUM=""
local SERVICE_DIR=/sa/info/services
local SERVICE_VAR_DIR=${SERVICE_DIR}/var
local EIR_INFO_FILE=${SERVICE_VAR_DIR}/hcsAudit.serviceTable.loaddata
local INFODIR=/sa/info/services/incoming
local PREVIOUS_WORKDIR=${OLDPWD}


## Modify HCSINFO_FIELDS to your liking, in order to get the information
## that you may want out of hcs.info
local HCSINFO_FIELDS="hcsServiceClass|hcsServiceDetail|hcsServiceApp|hcsServiceEnv|hcsServiceIP|hcsServiceTeam|hcsServiceSupportGroup"
local PREFIX="hcsservices-hostinfo-"
unset HOST_ARRAY

## If EIR number is not 4 characters long or is not a valid number,
## we will try again, over and over until we get a valid 4 digit number
while [[ -z "${EIR_NUM}" ]]; 
    do
        clear
            printf "%s" "Please enter Application EIR Number (i.e. 1111): "; read EIR_NUM
            printf "%s" "Select Evironment, empty for ALL ([C]cat, [D]dev, [P]prod, [S]sit): "; read ENV

## Here we need to make sure that our EIR number matches basic
## checks, like its length and the fact that it is indeed a number
        if [[ "${EIR_NUM}" =~ ^[0-9]+$ ]] && [[ "${#EIR_NUM}" -eq "4" ]];
            then         
                printf "%s\n" "Valid Format... Checking... Please be patient..."
                local FILENAME="/tmp/${EIR_NUM}.service.info"
                
                case "${ENV}" in
                C|c) ## Environment is CAT
                        local ENV="cat"
                    ;;
                D|d)  ## Environment is DEV
                        local ENV="dev"
                    ;;
                P|p) ## Environment is PROD
                        local ENV="prod"
                    ;;
                S|s)  ## Environment is DEV
                        local ENV="sit"
                    ;;
                *)  ## Environment is ALL
                        local ENV=""
                    ;;                    
                esac
                
            else
                printf "%s\n" "Invalid Format... Try Again..."; sleep 2
                unset EIR_NUM
        fi
    done  

cd "${INFODIR}"

## We first build an Array with list of servers that we find for the EIR_NUM
## which we supplied at the beginning of the function
## list consists of hostname, one per line
## The input from which the list is built is defined in 'EIR_NUM' and'ENV' vars

local HOST_ARRAY=( $(/usr/bin/awk '$5 ~/'"$ENV"'/ && $7 ~ /'"$EIR_NUM"'/ {print $1}' "${EIR_INFO_FILE}" | sort -u))
## local HOST_ARRAY=( $(cat "${EIR_LOOKUP}" | egrep "\W${EIR_NUM}\W" | egrep "${ENV}" | cut -f1 | sort -u) )

if [[ ${#HOST_ARRAY[@]} -le "1" ]]; 
    then
        printf "%s\n" "Unable to locate any servers for given EIR # ${EIR_NUM} Cowardly bailing..."
        return 1
fi

## We format and present output here, we also send a copy of the server list
## which we store in HOST_ARRAY to a file FILENAME
printf "%s\n\n"
printf "%s\n" "Servers that appear to belong to EIR # ${EIR_NUM}" 
printf "%s\n" "${HOST_ARRAY[@]}" | tee "${FILENAME}"
printf "%s\n\n"

FILENAME_ARRAY=()
for EACH_HOST in "${HOST_ARRAY[@]}"
    do 
    local FILENAME=$(ls "${PREFIX}${EACH_HOST}"_*)
    FILENAME_ARRAY+=( "${FILENAME}" )
    done
    
##    echo "${FILENAME_ARRAY[@]}"
    
for EACH_HOST in "${FILENAME_ARRAY[@]}"
    do
        printf "%s\n" ${DIV}
        printf "\t%s\n" ">>>> BEGIN hcs.info Details for host: ${EACH_HOST} <<<<"
        printf "%s\n" ${DIV}
        ## DO NOT modify anything here, if you want to change your selection
        ## instead, play with the 'HCSINFO_FIELDS' and 'GREP_RANGE' at the top
        egrep ${GREP_RANGE} --regexp=hcsServiceEIR=\'"${EIR_NUM}"\' "${EACH_HOST}" \
        | egrep "${HCSINFO_FIELDS}" | sed -e 's/\#\#.*\#\#//g' -e 's/  *//g'       
        printf "%s\n" ${DIV}
        printf "\t%s\n" ">>>> END hcs.info Details for host: ${EACH_HOST} <<<<"
        printf "%s\n" ${DIV}        
        printf "%s\n\n"
    done

unset HOST_ARRAY
unset FILENAME_ARRAY
## Return to our previous work directory
cd "${PREVIOUS_WORKDIR}"
return 0
}
