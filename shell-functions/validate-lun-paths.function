#!/bin/bash
TR=/usr/bin/tr
SED=/usr/bin/sed
SEP_LINE=$(printf "%80s\n"|tr ' ' '#')

validate_lun_paths ()

{
DEV_COUNTER="0"
local DMSETUP=/sbin/dmsetup
local EACH_LUN="$1"

### We read the multipath output file and extract devices for each multipath
### target in this format '0:0:0:0' expecting to get a list of 4 devices
### These are wrapped into one array, and for each item we validate that the
### device is functional

### Also we create a variable with the count of LUNs in the list
### which we will later use to compare against the count of verified LUNs
### those which we know have four individual paths
### 'TOTAL_LUN_COUNT' should contain a sum of LUNs in the two variables :
### 'DATA_LUN_COUNT' and 'FRA_LUN_COUNT'

[[ "${DEBUG}" -ge "1" ]] && printf "%s\t%s\n" "${TIMESTAP} Function name : validate_lun_paths" >> "${INFO_LOG}"

local counter="0"  ## We start out at zero, and expect to match the number with FRA_LUN_COUNT
# clear

loginfo "DEV[${DEV_COUNTER}]=${EACH_LUN}"
linesep

## Validate that 'dmsetup' is able to see the Multipath Device
## this does not mean that the block device under '/dev/mapper' exists,
## and we check for its existance also

"${DMSETUP}" info "${EACH_LUN}" &> /dev/null; local RET_CODE="$?"
    if [[ "${RET_CODE}" -ne "0" ]]; then
        loginfo "[CRITICAL] Device not a VALID Device-Mapper Block Device."
        loginfo "Failed: ${DMSETUP} info ${EACH_LUN}"
        local RET_CODE="1"; break
    elif
        ## Validation of Device-mapper
        [[ ! -b "/dev/mapper/${EACH_LUN}" ]]; then
        loginfo "[CRITICAL] DEV[${counter}] missing Device-Mapper Block Device. [Check Device!]"
        local RET_CODE="1"; break
    else
        loginfo "[SUCCESS] LUN has a VALID Device-Mapper Device."
        local RET_CODE="0"
    fi

printf "%s\n" "${SEP_LINE}"

DEV_COUNTER=$((DEV_COUNTER+1))

## If we fail our validation tests above, there is no sense to continue and waste any more time.
[[ "${RET_CODE}" -eq "1" ]] && return 1

## Here we create an ARRAY 'SINGLE_PATH_ARRAY', which will contain four paths for each LUN
## Our goal is to make sure that we have four paths to each LUN, in a running
## state, and if not, we likely need to stop and do some manual troubleshooting

SINGLE_PATH_ARRAY=($(grep -A7 "${EACH_LUN}" "${MPINFO}" | egrep --regexp="([0-9]{0,2}:[0-9]{0,2})" | sed -e "s/[\_]/ /g" -e "s/^  *//g" | cut -d" " -f1))
[[ "${DEBUG}" -ge "1" ]] && printf "%s\n" "Multipath registered ${#SINGLE_PATH_ARRAY[@]} paths to device /dev/mapper/${EACH_LUN}." >> "${INFO_LOG}"

## Create a one-line list of paths for a device
    list_paths ()
    {
    local counter="0"
        for i in "${SINGLE_PATH_ARRAY[@]}"
            do printf "%s" "[${counter}] [${i}] "
            local counter=$((counter+1))
        done
    }

printf "%s\n" "########################/ Validating Block Device Path /########################"
linesep

loginfo "$(list_paths)"

## First Check :: confirm that SINGLE_PATH_ARRAY has four elements in it
## If it does, we assume that we have the right number of paths to proceed
    if [[ "${#SINGLE_PATH_ARRAY[@]}" -eq "4" ]]; then
        loginfo "[SUCCESS] Confirmed 4 available paths to Device."

        ## Second Check :: Make sure that each path 'sd' is in a running state
        ## If not, we should not continue because paths may be stale
        for P in "${SINGLE_PATH_ARRAY[@]}"
            do
                local STATE=$(cat "/sys/bus/scsi/devices/${P}/state")

                if [[ ! "${STATE}" = "running" ]]; then ## Should be in a running state
                    printf "%s\n" "${SEP_LINE}"
                    loginfo "[FAILURE] DEV[${counter}], PATH ${P} is not in a Running State. [Check Device!]"
                    printf "%s\n" "${SEP_LINE}"
                    local RET_CODE="1"
                    break
                else
                    loginfo "[SUCCESS] Sub-path [${P}] is in a Running State."
                    local counter=$((counter + 1))
                    local RET_CODE="0"
                fi
            done
    else
        loginfo "Expected number of paths to LUN ${EACH_LUN} must equal to 4."
        local RET_CODE=1
        break
    fi
linesep

if [[ ! "${RET_CODE}" -eq "0" ]]; then
    printf "%s\n" "[FAILURE] Unable to Provision this LUN correctly." \
    "If more than one LUN is to be provisioned, moving on onto next LUN."
    sleep 3
fi

return "${RET_CODE:-0}"
}


for EACH_LUN in ${FRA_LUN_LIST[@]} ${DATA_LUN_LIST[@]} ${OCR_LUN_LIST[@]}
    do
        validate_lun_paths "${EACH_LUN}" || exit 1
    done

